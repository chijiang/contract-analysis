generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Contract {
  id               String           @id @default(cuid())
  originalFileName String
  mimeType         String
  fileSize         Int
  fileHash         String           @unique
  storageProvider  String           @default("LOCAL")
  filePath         String
  s3Key            String?
  markdown         String
  convertedAt      DateTime         @default(now())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  processingStatus String           @default("PENDING")  // PENDING, PROCESSING_BASIC_INFO, PROCESSING_ANALYSIS, PROCESSING_SERVICE_INFO, COMPLETED, FAILED
  processingError  String?          // 处理失败时的错误信息

  analysis ContractAnalysis?
  basicInfo ContractBasicInfo?
  processingLogs ContractProcessingLog[]
  deviceInfos ContractDeviceInfo[]
  maintenanceServices ContractMaintenanceServiceInfo[]
  digitalSolutions ContractDigitalSolutionInfo[]
  trainingSupports ContractTrainingSupportInfo[]
  complianceInfo ContractComplianceInfo?
  afterSalesSupport ContractAfterSalesSupportInfo?
  keySparePartTubes ContractKeySparePartTube[]
  keySparePartCoils ContractKeySparePartCoil[]
  serviceInfoSnapshot ContractServiceInfoSnapshot?

  @@index([createdAt])
  @@index([fileHash])
  @@index([processingStatus])
}

model ContractBasicInfo {
  id                    String   @id @default(cuid())
  contractId            String   @unique
  contractNumber        String?
  contractName          String?
  partyA                String?
  partyB                String?
  contractStartDate     String?
  contractEndDate       String?
  contractTotalAmount   Float?
  contractPaymentMethod String?
  contractCurrency      String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@index([contractName])
  @@index([contractNumber])
}

model ContractTemplate {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  standardClauses StandardClause[]

  @@index([name])
}

model StandardClause {
  id          String   @id @default(cuid())
  templateId  String
  category    String
  clauseItem  String
  standard    String
  riskLevel   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  template ContractTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, category, clauseItem])
  @@index([templateId])
  @@index([category])
}

model ContractAnalysis {
  id                 String   @id @default(cuid())
  contractId         String   @unique
  result             String
  standardClauses    String?
  selectedTemplateIds String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
}

model ContractProcessingLog {
  id          String   @id @default(cuid())
  contractId  String?
  action      String
  description String?
  source      String?
  status      String? @default("SUCCESS")
  durationMs  Int?
  metadata    String?
  createdAt   DateTime @default(now())

  contract Contract? @relation(fields: [contractId], references: [id], onDelete: SetNull)

  @@index([contractId, createdAt])
  @@index([action])
  @@index([createdAt])
}

/// 设备信息（多条/合同）
model ContractDeviceInfo {
  id                     String   @id @default(cuid())
  contractId             String
  deviceName             String?
  registrationNumber     String?
  deviceModel            String?
  geHostSystemNumber     String?
  installationDate       String?
  serviceStartDate       String?
  serviceEndDate         String?
  maintenanceFrequency   Int?
  responseTime           Float?
  arrivalTime            Float?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@index([contractId])
}

/// 保修服务信息（多条/合同）
model ContractMaintenanceServiceInfo {
  id                   String   @id @default(cuid())
  contractId           String
  maintenanceScope     String?
  includedPartsJson    String?  /// JSON 字符串数组
  sparePartsSupport    String?
  deepMaintenance      Int?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@index([contractId])
}

/// 数字化解决方案信息（多条/合同）
model ContractDigitalSolutionInfo {
  id                 String   @id @default(cuid())
  contractId         String
  softwareProductName String?
  hardwareProductName String?
  quantity           Int?
  servicePeriod      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@index([contractId])
}

/// 培训支持信息（多条/合同）
model ContractTrainingSupportInfo {
  id                 String   @id @default(cuid())
  contractId         String
  trainingCategory   String?
  applicableDevicesJson String? /// JSON 字符串数组
  trainingTimes      Int?
  trainingPeriod     String? 
  trainingDays       Int?
  trainingSeats      Int?
  trainingCost       String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@index([contractId])
}

/// 合同与合规信息（单条/合同）
model ContractComplianceInfo {
  id                               String   @id @default(cuid())
  contractId                       String   @unique
  informationConfidentialityRequirements Int?
  liabilityOfBreach                String?
  partsReturnRequirements          String?
  deliveryRequirements             String?
  transportationInsurance          String?
  deliveryLocation                 String?
  createdAt                        DateTime @default(now())
  updatedAt                        DateTime @updatedAt

  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
}

/// 售后支持信息（单条/合同）
model ContractAfterSalesSupportInfo {
  id                      String   @id @default(cuid())
  contractId              String   @unique
  guaranteeRunningRate    Float?
  guaranteeMechanism      String?
  serviceReportForm       String?
  remoteService           String?
  hotlineSupport          String?
  taxFreePartsPriority    Int?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
}

/// 合同服务信息快照（JSON 存储）
model ContractServiceInfoSnapshot {
  id         String   @id @default(cuid())
  contractId String   @unique
  payload    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@index([contractId])
}

/// 关键备件-球管（多条/合同）
model ContractKeySparePartTube {
  id                   String   @id @default(cuid())
  contractId           String
  deviceModel          String?
  geHostSystemNumber   String?
  xrTubeId             String?
  manufacturer         String?
  registrationNumber   String?
  contractStartDate    String?
  contractEndDate      String?
  responseTime         Float?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@index([contractId])
}

/// 关键备件-线圈（多条/合同）
model ContractKeySparePartCoil {
  id                   String   @id @default(cuid())
  contractId           String
  geHostSystemNumber   String?
  coilOrderNumber      String?
  coilName             String?
  coilSerialNumber     String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@index([contractId])
}
model ServicePlan {
  id          String              @id @default(cuid())
  name        String
  description String?

  clauses   ServicePlanClause[]
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  @@index([name])
}

model ServicePlanClause {
  id          String      @id @default(cuid())
  planId      String
  category    String?
  clauseItem  String
  requirement String
  notes       String?
  orderIndex  Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  plan ServicePlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([planId])
  @@index([planId, orderIndex])
}

// 用户角色模型
model Role {
  id          String   @id @default(cuid())
  name        String   @unique // admin, user
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users User[]
  permissions URLPermission[]

  @@index([name])
}

// 用户模型
model User {
  id            String   @id @default(cuid())
  username      String   @unique
  passwordHash  String
  roleId        String
  isPasswordChanged Boolean @default(false) // 是否已修改过默认密码
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  role Role @relation(fields: [roleId], references: [id])

  @@index([username])
  @@index([roleId])
  @@index([isActive])
}

// URL权限模型
model URLPermission {
  id          String   @id @default(cuid())
  urlPattern  String   // URL 模式，支持通配符，如 /contracts/*, /admin/*
  roleId      String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([urlPattern, roleId])
  @@index([roleId])
  @@index([urlPattern])
}
